name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-services:

    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [10.x, 12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Build client docker
        run: docker build ./client --file ./client/Dockerfile.dev --tag skillboost/multi-docker
        # :$(date +%s) - to add time
      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: ${{ matrix.node-version }}
      - name: Run tests for client
        run: docker run -e CI=true skillboost/multi-docker npm run test
        # run: docker run skillboost/multi-docker npm run test -- --coverage
        env:
          CI: true
      - run: docker build ./client --tag skillboost/multi-client
      - run: docker build ./nginx --tag skillboost/multi-nginx
      - run: docker build ./server --tag skillboost/multi-server
      - run: docker build ./worker --tag skillboost/multi-worker
      # Must provide --username with --password-stdin
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # - run: docker login --username ${{ secrets.DOCKER_ID }} --password-stdin ${{ secrets.DOCKER_PASSWORD }}
      # - run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_ID }} --password-stdin
      # - run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
      - run: docker push skillboost/multi-client
      - run: docker push skillboost/multi-nginx
      - run: docker push skillboost/multi-server
      - run: docker push skillboost/multi-worker

  my-ci-pipeline:
    runs-on: ubuntu-latest
    needs: [build-services]
    steps:
      - name: configure aws auth
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
      - name: copy deployment package to s3
        run: aws s3 cp docker-compose.yml s3://elasticbeanstalk-us-east-2-290622572962/docker-compose.yml
      - name: Message on completion of CI Pipeline
        run: echo "CI Pipeline part finished successfully"
  # my-cd-pipeline:
  #   runs-on: ubuntu-latest
  #   needs: [my-ci-pipeline]
  #   steps:
      # - name: Configure my AWS Credentils
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #   aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
      #   aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
      #   aws-region: ${{ inputs.AWS-REGION }}

      - name: Create new ElasticBeanstalk Applicaiton Version
        run : aws elasticbeanstalk create-application-version
        --application-name multi-docker
        --source-bundle S3Bucket=elasticbeanstalk-us-east-2-290622572962,S3Key=docker-compose.yml
        --version-label "Ver-${{ github.sha }}"
        --description "CommitSHA-${{ github.sha }}"
      - name: Deploy our new Application Version
        run : aws elasticbeanstalk update-environment --environment-name Multidocker-env --version-label "Ver-${{ github.sha }}"

      - name: Message on completion of CD Pipeline
        run : echo "CD Pipeline part finished successfully"
      # aws elasticbeanstalk create-application-version \
      # --application-name multi-docker \
      # --source-bundle S3Bucket="elasticbeanstalk-us-east-2-290622572962",S3Key="docker-compose.yml" \
      # --version-label "Ver-${{ github.sha }}" \
      # --description "CommitSHA-${{ github.sha }}"

      # -
      #   name: Generate deployment package
      #   run: zip -r deploy.zip . -x '*.git*'
      # -
      #   name: Deploy to EB
      #   uses: einaregilsson/beanstalk-deploy@v18
      #   with:
      #     aws_access_key: ${{ secrets.AWS_ACCESS_ID }}
      #     aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
      #     application_name: multi-docker
      #     environment_name: Multidocker-env
      #     version_label: ${{ github.SHA }}
      #     region: us-east-2
      #     # deployment_package: deploy.zip
      #     deployment_package: docker-compose.yml
      #     existing_bucket_name: elasticbeanstalk-us-east-2-290622572962

# POSTGRES
# databasename: fibvalues
# database: postgres
# databasepass: postgres_password
# port: 5432

# REDIS
# PORT: 6379


# before_intstall:
#   - docker build -t skillboost/docker-react-test -f ./client/Dockerfile.dev ./client

# script:
#   - docker run -e CI=true skillboost/react-test npm run test -- --coverage

# # starting client build process
# after_success:
#   # default Dockerfile will be used
#   - docker build -t skillboost/multi-client ./client
#   - docker build -t skillboost/multi-nginx ./nginx
#   - docker build -t skillboost/multi-server ./server
#   - docker build -t skillboost/multi-worker ./worker
#   # Log in to Docker CLI
#   # Log in to Docker CLI
#   # passing credentials with --password-stdin
#   # so those are automatically typed in the
#   # log in process
#   - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
#   # Take those images and push them to docker hub
#   - docker push skillboost/multi-client
#   - docker push skillboost/multi-nginx
#   - docker push skillboost/multi-server
#   - docker push skillboost/multi-worker

# name: Node.js CI

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: [10.x, 12.x, 14.x, 15.x]

#     steps:
#       - uses: actions/checkout@v2
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v2
#         with:
#           node-version: ${{ matrix.node-version }}
#       - name: Install dependencies
#         run: npm ci
#       - run: npm run build --if-present
#       - run: npm test

# deploy:
#   provider: elasticbeanstalk
#   # taken from available address to the server
#   # "...".us-east-2.elasticbeanstalk.com
#   region: "us-east-2"
#   # app name
#   app: "docker-react-test"
#   # env created by AWS EBS
#   env: "Dockerreacttest-env"
#   # when travis deploys takes all the code base
#   # files and zip them all up into 1 single file
#   # and copy it to S3 bucket
#   # it's a name of S3 bucket the file will
#   # be put into
#   bucket_name: "elasticbeanstalk-us-east-2-290622572962"
#   # path to the bucket
#   # default is the name of the app
#   # docker-react-test
#   # after deploy, folder will be put
#   # with the name same or similar to the name
#   # of the app within the S3 bucket as a folder
#   bucket_path: "docker-react-test"
#   # this happens only if there are commits
#   # pushed to master branch
#   # there will be buffer branch named feature
#   on:
#     branch: master
#   access_key_id: $AWS_ACCESS_KEY
#   secret_access_key: $AWS_SECRET_KEY
#   # secure: $AWS_SECRET_KEY